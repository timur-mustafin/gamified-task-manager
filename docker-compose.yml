services:
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: gtm_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gtm_db"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "5432:5432"
    networks: [appnet]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: gtm_db
      DJANGO_SETTINGS_MODULE: core.settings.dev
      RUN_CMD: "python manage.py runserver 0.0.0.0:8000 --settings=core.settings.dev"
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media:/app/media
      - static:/app/static
    networks: [appnet]

  frontend-build:
    image: node:20-alpine
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
      - dist:/frontend/dist
      - node_modules:/frontend/node_modules
    command: sh -c "npm ci && npm run build"
    networks: [appnet]

  nginx:
    image: nginx:stable-alpine
    depends_on:
      - backend
    ports:
      - "3001:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro 
      - media:/app/media:ro
      - static:/app/static:ro
    networks: [appnet]

volumes:
  pgdata:
  media:
  static:
  dist:
  node_modules:

networks:
  appnet:
    driver: bridge
